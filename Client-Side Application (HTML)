<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Decentralized Workload Sharing</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .container {
            max-width: 800px;
            margin: auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        h1 {
            text-align: center;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input[type="text"], textarea {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }
        button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }
        .task-list {
            margin-top: 20px;
        }
        .task-item {
            border-bottom: 1px solid #ccc;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Decentralized Workload Sharing</h1>

        <!-- Task Submission Form -->
        <div>
            <h2>Submit a New Task</h2>
            <form id="taskForm">
                <div class="form-group">
                    <label for="taskDescription">Task Description:</label>
                    <textarea id="taskDescription" rows="4" required></textarea>
                </div>
                <div class="form-group">
                    <label for="taskReward">Reward (ETH):</label>
                    <input type="number" id="taskReward" step="0.001" min="0" required>
                </div>
                <button type="submit">Submit Task</button>
            </form>
        </div>

        <!-- Task List -->
        <div class="task-list">
            <h2>My Tasks</h2>
            <ul id="taskList"></ul>
        </div>

        <!-- Payment History -->
        <div>
            <h2>Payment History</h2>
            <ul id="paymentHistory"></ul>
        </div>

        <!-- Account Settings -->
        <div>
            <h2>Account Settings</h2>
            <button onclick="viewAccountSettings()">View Settings</button>
        </div>

        <!-- Scripts -->
        <script src="https://cdn.jsdelivr.net/npm/ethers@5.0.0/dist/ethers.min.js"></script>
        <script>
            const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545'); // Replace with your Fula node URL
            let signer;
            let contract;

            async function connectWallet() {
                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                signer = provider.getSigner(accounts[0]);
                contract = new ethers.Contract(contractAddress, contractABI, signer);
            }

            async function loadTasks() {
                const tasksCount = await contract.nextTaskId();
                const taskList = document.getElementById('taskList');
                taskList.innerHTML = '';

                for (let i = 1; i < tasksCount.toNumber(); i++) {
                    const task = await contract.tasks(i);
                    if (task.creator === signer.getAddress()) {
                        const li = document.createElement('li');
                        li.className = 'task-item';
                        li.textContent = `Task ID: ${i}, Description: ${taskDescription.value}, Reward: ${taskReward.value} ETH, Status: ${task.completed ? 'Completed' : 'Pending'}`;
                        taskList.appendChild(li);
                    }
                }
            }

            async function loadPaymentHistory() {
                // Implement logic to fetch and display payment history
            }

            function viewAccountSettings() {
                alert('View Account Settings');
            }

            document.getElementById('taskForm').addEventListener('submit', async function(event) {
                event.preventDefault();
                const description = document.getElementById('taskDescription').value;
                const reward = ethers.utils.parseEther(document.getElementById('taskReward').value);

                await contract.createTask({ value: reward });

                // Clear form and refresh task list
                document.getElementById('taskForm').reset();
                loadTasks();
            });

            window.onload = async () => {
                connectWallet();
                loadTasks();
                loadPaymentHistory();
            };
        </script>
    </div>
</body>
</html>
